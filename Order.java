import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class Order extends javax.swing.JFrame {
    
    static Connection myConn;
    private boolean newOrder = true;

    public Order() {

        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            // If Nimbus is not available, you can set the GUI to another look and feel.
        }

        initComponents();
        this.setLocationRelativeTo(null);
        addOrderFrame.setLocationRelativeTo(null);
        this.setVisible(true);

        //Initialize Order Table
        updateOrderTable();

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addOrderFrame = new JFrame();
        oConfirmButton = new JButton();
        oCancelButton = new JButton();
        orderFrame = new JPanel();
        updateOrderButton = new JButton();
        addOrderButton = new JButton();
        removeOrderButton = new JButton();
        orderBackButton = new JButton();
        jScrollPane1 = new JScrollPane();
        jScrollPane2 = new JScrollPane();
        orderTable = new JTable();
        searchField = new JTextField();
        searchButton = new JButton();
        oDateField = new JTextField();
        oAmountField = new JTextField();
        oProductField = new JTextField();
        oLocationField = new JTextField();
        oReplenishBox = new JCheckBox();
        oDateText = new JLabel();
        oAmountText = new JLabel();
        oProductText = new JLabel();
        oLocationText = new JLabel();
        oReplenishText = new JLabel();
        userLabel = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inventory Management");
        setResizable(false);

        orderFrame.setPreferredSize(new Dimension(600, 500));

        updateOrderButton.setText("Update Order");
        updateOrderButton.setFocusPainted(false);
        updateOrderButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                updateOrderButtonActionPerformed(evt);
            }
        });

        addOrderButton.setText("Add Order");
        addOrderButton.setFocusPainted(false);
        addOrderButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addOrderButtonActionPerformed(evt);
            }
        });

        addOrderFrame.setTitle("Add Order");
        addOrderFrame.setResizable(false);
        addOrderFrame.setMinimumSize(new Dimension(370, 300));
        oDateText.setText("Date:");
        oAmountText.setText("Amount:");
        oProductText.setText("Product ID:");
        oReplenishText.setText("Replenish:");
        oLocationText.setText("Location:");
        oConfirmButton.setText("Confirm");
        oConfirmButton.setFocusPainted(false);
        oConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oConfirmButtonActionPerformed(evt);
            }
        });
        oCancelButton.setText("Cancel");
        oCancelButton.setFocusPainted(false);
        oCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addOrderFrameLayout = new javax.swing.GroupLayout(addOrderFrame.getContentPane());
        addOrderFrame.getContentPane().setLayout(addOrderFrameLayout);
        addOrderFrameLayout.setHorizontalGroup(
                addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addOrderFrameLayout.createSequentialGroup()
                                .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(addOrderFrameLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addOrderFrameLayout.createSequentialGroup()
                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                .addComponent(oConfirmButton)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(oCancelButton))
                                                        .addGroup(addOrderFrameLayout.createSequentialGroup()
                                                                .addGap(28,28,28)
                                                                .addComponent(oAmountText)
                                                                .addGap(6,6,6)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(oAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(0, 26, Short.MAX_VALUE))
                                                )
                                        )
                                        .addGroup(addOrderFrameLayout.createSequentialGroup()
                                                .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(addOrderFrameLayout.createSequentialGroup()
                                                                .addGap(44, 44, 44)
                                                                .addComponent(oDateText)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(oDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(addOrderFrameLayout.createSequentialGroup()
                                                                .addGap(18, 18, 18)
                                                                .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                                .addComponent(oLocationText)
                                                                                .addComponent(oReplenishText))
                                                                        .addComponent(oProductText, javax.swing.GroupLayout.Alignment.TRAILING))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                .addComponent(oReplenishBox)
                                                                                .addComponent(oLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addComponent(oProductField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        addOrderFrameLayout.setVerticalGroup(
                addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addOrderFrameLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGap(30,30,30)
                                .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(oDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(oDateText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(oAmountText)
                                        .addComponent(oAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(oProductText)
                                        .addComponent(oProductField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(oReplenishText)
                                        .addComponent(oReplenishBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(oLocationText)
                                        .addComponent(oLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                                .addGroup(addOrderFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(oConfirmButton)
                                        .addComponent(oCancelButton))
                                .addContainerGap())
        );


        removeOrderButton.setText("Remove Order");
        removeOrderButton.setFocusPainted(false);
        removeOrderButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                removeOrderButtonActionPerformed(evt);
            }
        });

        orderBackButton.setText("Back");
        orderBackButton.setFocusPainted(false);
        orderBackButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                oBackButtonActionPerformed(evt);
            }
        });

        orderTable.setModel(new DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                },
                new String [] {
                        "Order ID", "User ID", "Product ID", "Order Date", "Amount Ordered", "Total Cost", "Replenish", "Location"
                }
        ));
        orderTable.setDefaultEditor(Object.class, null);
        jScrollPane2.setViewportView(orderTable);

        searchButton.setText("Search");
        userLabel.setText("Hello " + database.returnVal("users", "user_id", LoginPage.user, "first_name") + " " + database.returnVal("users", "user_id", LoginPage.user, "last_name") + " [Employee ID: " + LoginPage.user + "]");

        GroupLayout orderFrameLayout = new GroupLayout(orderFrame);
        orderFrame.setLayout(orderFrameLayout);
        orderFrameLayout.setHorizontalGroup(
                orderFrameLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(orderFrameLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(orderFrameLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                                        .addGroup(orderFrameLayout.createSequentialGroup()
                                                .addGroup(orderFrameLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(removeOrderButton)
                                                        .addComponent(updateOrderButton)
                                                        .addComponent(addOrderButton))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(GroupLayout.Alignment.TRAILING, orderFrameLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(orderBackButton, GroupLayout.PREFERRED_SIZE, 84, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(GroupLayout.Alignment.TRAILING, orderFrameLayout.createSequentialGroup()
                                                .addComponent(userLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(searchField, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE)
                                                .addGap(7, 7, 7)
                                                .addComponent(searchButton)))
                                .addContainerGap())
        );
        orderFrameLayout.setVerticalGroup(
                orderFrameLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(orderFrameLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(orderFrameLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(searchField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(searchButton)
                                        .addComponent(userLabel))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 332, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateOrderButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addOrderButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeOrderButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(orderBackButton)
                                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(orderFrame, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(orderFrame, GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
        );

        pack();

    }// </editor-fold>//GEN-END:initComponents

    private void updateOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateOrderButtonActionPerformed
        try {
            int row = orderTable.getSelectedRow();
            if (row > -1) {
                if (orderTable.getModel().getValueAt(row, 0) != null) {
                    String queryID = orderTable.getModel().getValueAt(row, 0).toString();

                    try {
                        Statement stmt = myConn.createStatement();
                        String query = "select * from our_company.orders where order_ID=" + queryID;
                        ResultSet rs = stmt.executeQuery(query);
                        rs.next();

                        oDateField.setText(rs.getString("order_date"));
                        oAmountField.setText(rs.getInt("amount_ordered") + "");
                        oProductField.setText(rs.getString("product_ID"));
                        oReplenishBox.setSelected(rs.getBoolean("order_replenish_boolean"));
                        oLocationField.setText(rs.getString("location"));
                    } catch (SQLException ex) {
                        System.out.println("Error string to update order");
                    }


                    newOrder = false;

                    addOrderFrame.setTitle("Update Order");
                    addOrderFrame.setVisible(true);
                } else {
                    errorMessage = "There's nothing to update!";
                    JOptionPane.showMessageDialog(null, errorMessage, "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                errorMessage = "You must select an order first!";
                JOptionPane.showMessageDialog(null, errorMessage, "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }//GEN-LAST:event_updateOrderButtonActionPerformed

    private void addOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrderButtonActionPerformed
        //Reset all text fields/areas to null
        oDateField.setText(String.valueOf(java.time.LocalDate.now()));
        oAmountField.setText("");
        oProductField.setText("");
        oReplenishBox.setSelected(false);
        oLocationField.setText("");
        newOrder = true;

        addOrderFrame.setTitle("Add Order");
        addOrderFrame.setVisible(true);

    }//GEN-LAST:event_addOrderButtonActionPerformed

    private void oCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oCancelButtonActionPerformed
        addOrderFrame.setVisible(false);
    }//GEN-LAST:event_oCancelButtonActionPerformed

    private void oConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oConfirmButtonActionPerformed
        if(newOrder)
            addOrder();
        else
            updateOrder();
        addOrderFrame.setVisible(false);
    }//GEN-LAST:event_oConfirmButtonActionPerformed

    private void oBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oBackButtonActionPerformed
        this.dispose();
        ManagerGUI manager = new ManagerGUI();
    }//GEN-LAST:event_oBackButtonActionPerformed

    private void removeOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeOrderButtonActionPerformed
        deleteOrder();
    }//GEN-LAST:event_removeOrderButtonActionPerformed


    //Adds an order into the database based on the info inputted in the addOrderFrame
    public void addOrder(){

        try {
            myConn = DriverManager.getConnection(database.url,database.user,database.password);
            if (myConn != null) {
                //System.out.println("Successfully connected to MySQL database test");
            }

            Statement stmt = myConn.createStatement();
            String query = "SELECT * FROM our_company.orders ORDER BY order_ID DESC LIMIT 1";
            ResultSet rs = stmt.executeQuery(query);
            int recentOrderID;
            if (rs.next())
                recentOrderID = rs.getInt("order_ID");
            else
                recentOrderID = 0;

            //  ---INSERT STATEMENT---
            String sql = "insert into our_company.orders (order_ID, user_ID, product_ID, order_date, amount_ordered, total_cost, order_replenish_boolean, location) values (?, ?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement statement = myConn.prepareStatement(sql);

            statement.setInt(1, recentOrderID+1);
            statement.setInt(2, Integer.parseInt(LoginPage.user));
            statement.setInt(3, Integer.parseInt(oProductField.getText()));
            statement.setString(4, oDateField.getText());
            statement.setInt(5, Integer.parseInt(oAmountField.getText()));
            statement.setDouble(6, Double.parseDouble(database.returnVal("product", "product_id",oProductField.getText(),"Price")) * Double.parseDouble(oAmountField.getText()));
            if (oReplenishBox.isSelected())
                statement.setBoolean(7, true);
            else
                statement.setBoolean(7, false);
            statement.setString(8, oLocationField.getText());

            int rowsInserted = statement.executeUpdate();
            if(rowsInserted > 0){
                System.out.println("New order added successfully!");
            }

        } catch (SQLException ex) {
            System.out.println("An error occurred while connecting MySQL databse");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }

        updateOrderTable();
    }


    //Updates the selected order on the database
    public void updateOrder(){
        int row = orderTable.getSelectedRow();
        String queryID = orderTable.getModel().getValueAt(row, 0).toString();
        try {
            myConn = DriverManager.getConnection(database.url,database.user,database.password);

            Statement stmt = myConn.createStatement();
            String query = "SELECT * FROM our_company.orders where order_ID="+queryID;
            ResultSet rs = stmt.executeQuery(query);
            rs.next();

            int id = rs.getInt("order_ID");
            int userID = rs.getInt("user_ID");
            String date = oDateField.getText();
            int amount = Integer.parseInt(oAmountField.getText());
            String product = oProductField.getText();
            boolean replenish;
            if (oReplenishBox.isSelected())
                replenish = true;
            else
                replenish = false;
            String location = oLocationField.getText();

            String sql = "update our_company.orders set "
                    + "order_date ='" + date + "',"
                    + "amount_ordered =" + amount + ","
                    + "product_ID =" + product + ","
                    + "order_replenish_boolean=" + replenish + ","
                    + "location='" + location + "'"
                    + " where order_ID=" + queryID;

            PreparedStatement p = myConn.prepareStatement(sql);
            p.execute();

        } catch (SQLException ex) {
            System.out.println("An error occurred while connecting MySQL databse");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }

        updateOrderTable();
        System.out.println("Order successfully updated");
    }


    //Helps Update the GUI whenever the order table is changed
    //Notes: Maybe add some arguments for sorting later
    public void updateOrderTable(){

        try {
            myConn = DriverManager.getConnection(database.url,database.user,database.password);
            PreparedStatement pst = myConn.prepareStatement("select * from our_company.orders");
            ResultSet rs = pst.executeQuery();
            int i = 0;

            DefaultTableModel table = new DefaultTableModel(new String [] {"Order ID", "User ID", "product_ID", "Order Date", "Amount Ordered", "Total Cost", "Replenish", "Location"},0);

            while (rs.next()) {
                int id = rs.getInt("order_ID");
                int userID = rs.getInt("user_ID");
                int productID = rs.getInt("product_ID");
                String date = rs.getString("order_date");
                int amount = rs.getInt("amount_ordered");
                String total = rs.getString("total_cost");
                boolean replenish = rs.getBoolean("order_replenish_boolean");
                String location = rs.getString("location");

                table.addRow(new Object[]{id, userID, productID, date, amount, total, replenish, location});
                orderTable.setModel(table);

            }

            if (!rs.next()) {
                table.addRow(new Object[]{null, null, null, null, null, null, null, null});
                orderTable.setModel(table);
            }

        }catch (SQLException ex) {
            System.out.println("An error occurred while connecting MySQL databse");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }

    }


    //Deletes an order from the database
    //Note: GUI isn't updating when deleting the last order
    public void deleteOrder(){
        try {
            int row = orderTable.getSelectedRow();

            if (row > -1) {

                try {
                    myConn = DriverManager.getConnection(database.url, database.user, database.password);

                    if (orderTable.getModel().getValueAt(row, 0) != null) {
                        String queryID = orderTable.getModel().getValueAt(row, 0).toString();
                        String query = "delete from our_company.orders where order_ID=" + queryID;
                        PreparedStatement pst = myConn.prepareStatement(query);
                        pst.execute();
                        System.out.println("Order successfully removed");
                    } else {
                        errorMessage = "There's nothing to remove!";
                        JOptionPane.showMessageDialog(null, errorMessage, "ERROR", JOptionPane.ERROR_MESSAGE);
                    }


                } catch (SQLException ex) {
                    System.out.println("An error occurred while connecting MySQL databse");
                    ex.printStackTrace();
                    throw new RuntimeException(ex);
                }

                updateOrderTable();
            } else {
                errorMessage = "You must select an order first!";
                JOptionPane.showMessageDialog(null, errorMessage, "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    /**
     * @param args the command line arguments
     */




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addOrderButton;
    private javax.swing.JFrame addOrderFrame;

    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton oCancelButton;
    private javax.swing.JButton oConfirmButton;
    private javax.swing.JButton orderBackButton;
    private javax.swing.JPanel orderFrame;
    private javax.swing.JTable orderTable;
    private javax.swing.JButton removeOrderButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;

    private javax.swing.JButton updateOrderButton;
    private javax.swing.JTextField oDateField;
    private javax.swing.JTextField oAmountField;
    private javax.swing.JTextField oProductField;
    private javax.swing.JTextField oLocationField;
    private javax.swing.JCheckBox oReplenishBox;
    private javax.swing.JLabel oDateText;
    private javax.swing.JLabel oAmountText;
    private javax.swing.JLabel oProductText;
    private javax.swing.JLabel oLocationText;
    private javax.swing.JLabel oReplenishText;
    private javax.swing.JLabel userLabel;

    private static String errorMessage;

    // End of variables declaration//GEN-END:variables
}